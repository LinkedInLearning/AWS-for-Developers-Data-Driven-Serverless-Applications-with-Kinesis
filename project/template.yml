AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  MyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.handler
      Runtime: nodejs18.x
      Events:
        KinesisEvent:
          Type: Kinesis
          Properties:
            Stream: !GetAtt Source.Arn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
            FilterCriteria:
              Filters:
                - Pattern: '{"data": {"Type": ["analytics"] }}'

  EDAFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: edaFunction.handler
      Runtime: nodejs18.x
      Events:
        KinesisEvent:
          Type: Kinesis
          Properties:
            StartingPosition: TRIM_HORIZON
            Stream: !GetAtt Source.Arn
            BatchSize: 1
            FilterCriteria:
              Filters:
                - Pattern: '{"data": {"Type": ["EDA"] }}'

  Source:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}-source
      StreamModeDetails:
        StreamMode: ON_DEMAND

  MyEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub ${AWS::StackName}-eda-bus

  TestingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-destination-loggroup

  MyEventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'EventBridge to CloudWatch log group'
      EventBusName: !Ref MyEventBus
      EventPattern:
        source:
          - prefix: '' # To match all events
      Targets:
        - Arn: !GetAtt TestingLogGroup.Arn
          Id: 'ruleCloudwatch'

  LogGroupForEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: EventBridgeToCloudWatchLogsPolicy
      PolicyDocument: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${TestingLogGroup.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${TestingLogGroup.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${MyEventsRule.Arn}"}
              }
            }
          ]
        }

  # EDA EventBridge Pipe
  EDAPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: !Sub ${AWS::StackName}-eda-pipe
      RoleArn: !GetAtt EDAPipeRole.Arn
      Source: !GetAtt Source.Arn
      SourceParameters:
        KinesisStreamParameters:
          StartingPosition: LATEST
          BatchSize: 1
      Target: !GetAtt MyEventBus.Arn

  EDAPipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SourcePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                Resource: !GetAtt Source.Arn
        - PolicyName: TargetPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt MyEventBus.Arn
